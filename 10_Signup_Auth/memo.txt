nest g module user를 통해 user라는 모듈을 만듦
nest g controller user --no-spec을 통해 user.controller.ts를 만듦
nest g service user --no-spec을 통해 user.service.ts를 만듦

SQL 문법을 사용하는 대신 객체관계형 매핑기술을 의미하는 ORM을 사용하여 객체를 다루듯이 정보를 다룰 수 있는데 대표적인 라이브러리가 TypeORM

@Param('email')

엔티티는 데이터베이스 테이블, 테이블의 객체

설정을 하기 위해 forRoot, repository를 연관시키기 위해 forFeature

사용자 입력값에 대한 유효성 검증은 필수
class-transformer는 전달받은 JSON 정보를 클래스 객체로 변경한다.
class-validator는 컨트롤러 메서드의 매개변수에 있는 클래스와 같다면 유효성 검증을 한다.

인증
정확성 측면 : 사용자의 자격증명을 기존 정보를 기반으로 확인 후 인증 토큰을 발급하는 것
시간 측면 : 사용자에게 부여된 인증은 특정 기간 동안만 유효

Auth 모듈은 쿠키가 사용되는 인증 로그인을 위한 것. user 모듈은 그냥 로그인을 위한 것.

@Injectable()이 붙어있는 프로바이더의 경우 모듈의 다른 클래스에서 주입해 사용할 수 있지만, 다른 모듈에서 사용하려면 @Module 데코레이터 속성으로 exports에 프로바이더를 넣어주어야 함

Header와 Body가 모두 필요할 때, @Request() 사용

Nestjs는 인증할 때 Guard라고 하는 미들웨어를 보편적으로 사용함. 클라이언트 - 가드 - Controller 관계임.
@UseGuard를 붙여서 사용함.
CanActivate 인터페이스를 구현하는 과정에서 CanActivate() 메소드를 구현해야 함. true일 경우 Controller를 실행하게 하고, false이면 403에러를 주도록 해야 함

가드 내에서는 쿠키를 설정할 수 없다.
가드는 모든 미들웨어 실행이 끝난 다음 실행되며, pipe보다는 먼저 실행됨

쿠키만으로 인증하면 위조 변조와 탈취의 우려가 있다. 쿠키에 정보가 포함되어 있는 경우, 특히 더 위험하다.
따라서, 서버에서 인증을 하고, 관련 정보는 모두 서버나 데이터베이스에 저장하는 세션을 사용하는 것이 좋다. 
세션도 쿠키를 사용하지만, 알아차릴 수 없게 처리를 해서 보낸다.

가드 - 스트래티지(패스포트) - 세션 시리얼라이저 구조에서 가드는 모든 Request에 대해 먼저 만나게 되는 것, 스트래티지에서 인증 로직 구현하고, 세션 시리얼라이지에서 세션 관련 작업