@가 붙어 있으면 데코레이터, 보통은 클래스와 함수의 앞뒤에 전후 처리를 해주어서 해당 코드의 동작에 부가적인 기능을 추가한다.

NestJS의 네이밍 규칙
1. 파일명 : <모듈명>.<컴포넌트명>.ts , 예를 들어 hello.controller.ts
2. 클래스명 : <모듈명><컴포넌트명> Camel Case 사용, HelloController
3. 같은 디렉터리에 있는 클래스는 index.ts를 사용하여 import 하는 것이 권장됨
4. 타입스크립트에서는 인터페이스를 많이 사용하는데, 인터페이스는 타입을 정의하는데 사용되고 구체적인 내용은 클래스를 만들고 인터페이스를 상속하는 방식으로 작성

npm install -g @nestjs/cli는 nestjs를 CLI로 사용하기 위해 설치하는 명령어
nest new [PROJECT NAME]로 프로젝트 생성한다.

main.ts와 app.module.ts를 제외하고 모두 삭제한다.

controller에서 요청에 따른 함수를 매핑시키고, service에서 로직을 설계하고, repository에서 변수 선언 및 함수 구현한다.

구현하지 않고, 타입만 선언할 때는 class 대신 interface를 사용한다. 데이터만 담고 있는 객체를 Dto라고 하는데, Dto는 interface를 사용한다.

@Injectable() 을 통해 의존성을 주입함. 의존성 주입을 통해 객체를 직접 생성하지 않고, 생성자나 필드 선언에 데코레이터를 추가해 의존성 객체를 주입함.

클래스의 생성자에 매개변수로 설정된 타입이 프로바이더로 설정된 클래스 중 하나라면, NestJS에서 자동으로 필요한 객체를 주입